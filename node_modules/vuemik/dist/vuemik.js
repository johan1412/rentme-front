/**
 * Vuemik 1.0.4
 * (c) 2021
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

var script = vue.defineComponent({
    name: 'Vuemik',
    props: {
        onSubmit: { type: Function, required: true },
        initialValues: { type: Object, required: true },
    },
    data() {
        return {
            values: JSON.parse(JSON.stringify(this.initialValues)),
        };
    },
    provide() {
        return {
            vuemik: {
                values: this.values,
                change: this.handleChange,
            },
        };
    },
    methods: {
        isSelectElement(element) {
            return element.options !== undefined;
        },
        isInputElement(element) {
            return (element.type !== undefined
                && element.type !== 'textarea');
        },
        eventOrValue(e) {
            if (!(e instanceof Event)) {
                throw new Error('Instance of Event expected');
            }
            if (this.isSelectElement(e.target)) {
                const selectedOption = e.target.options[e.target.selectedIndex];
                return selectedOption.value;
            }
            if (this.isInputElement(e.target)) {
                if (e.target.type === 'checkbox') {
                    return e.target.checked;
                }
                return e.target.value;
            }
            return e.target.value;
        },
        handleChange(e) {
            this.setValues({ [e.target.name]: this.eventOrValue(e) });
        },
        setValues(values) {
            Object.entries(values).forEach(([key, val]) => {
                this.$data.values[key] = val;
            });
        },
        handleSubmit() {
            this.onSubmit(this.values);
        },
    },
});

const _hoisted_1 = { class: "vuemik-form" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (vue.openBlock(), vue.createBlock("div", _hoisted_1, [
    vue.renderSlot(_ctx.$slots, "default", { handleSubmit: _ctx.handleSubmit })
  ]))
}

script.render = render;
script.__file = "src/vuemik/Vuemik.vue";

var script$1 = vue.defineComponent({
    name: 'Field',
    props: {
        component: { type: [Object, String], required: true },
        name: { type: String, required: true },
    },
    inject: ['vuemik'],
    methods: {},
});

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.component), {
    name: _ctx.name,
    onInput: _ctx.vuemik.change,
    value: _ctx.vuemik.values[_ctx.name],
    checked: _ctx.vuemik.values[_ctx.name]
  }, {
    default: vue.withCtx(() => [
      vue.renderSlot(_ctx.$slots, "default")
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["name", "onInput", "value", "checked"]))
}

script$1.render = render$1;
script$1.__file = "src/vuemik/Field.vue";

exports.Field = script$1;
exports.Vuemik = script;
